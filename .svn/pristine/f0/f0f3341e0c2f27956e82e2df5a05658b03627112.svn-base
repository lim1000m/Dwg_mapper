package kr.mp.dwg.objectMgt.web;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import kr.mp.dwg.cmmn.util.ColumnDataSet;
import kr.mp.dwg.cmmn.util.CommUtil;
import kr.mp.dwg.cmmn.util.MapperUtils;
import kr.mp.dwg.cmmn.util.ProcResultMsg;
import kr.mp.dwg.cmmn.util.StringUtil;
import kr.mp.dwg.domain.DwgMappVO;
import kr.mp.dwg.domain.JqGridVO;
import kr.mp.dwg.domain.ObjectInfoVO;
import kr.mp.dwg.domain.search.Response;
import kr.mp.dwg.objectMgt.service.ObjectInfoService;

import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.servlet.ModelAndView;

import egovframework.rte.psl.dataaccess.util.EgovMap;

@Controller
public class ObjectInfoController {
	
	/** ObjectInfoService */
    @Resource(name  = "objectInfoService")
    private ObjectInfoService objectInfoService;
    
    /** MessageResource */
    @Resource(name = "messageSource")
    private MessageSource messageSource;
    
    private static String OBJ_TYPE="G801";
	/**
     * 
     * @methodName : getSearchDwg
     * @author 박용택
     * @since 2013. 12. 23.
     * @comment 
     *   객체 오브젝트 조회
     * @param  ObjectID 오브젝트 ID
     * @param  dwgPage 도면 현재 페이지
     * @param  dwgRow 도면 페이지당 표시 개수
     * @param  dwgOrd 도면 정렬 컬럼명
     * @return String view url
     * @throws Exception 
     *
     */
    @RequestMapping(value="/dwg/objectmgt/main.do")
    public String form(HttpServletRequest request,
    		ModelMap model) throws Exception {
    	
		return "objectmgt/objectInfoMgt";
    }   
    /**
     *  @methodName : objectGridForm
     * @author 박용택
     * @since 2013. 12. 23.
     * @comment 
     *    객체 오브젝트 그리드 Form
     * @param request
     * @param modelMap
     * @param session
     * @return
     */
    @RequestMapping(value="/dwg/objectmgt/objectGridForm.do")
    public String  objectGridForm(HttpServletRequest request, 
    		ModelMap modelMap,
    		HttpSession session) {
    	
    	String lang = (String)session.getAttribute("lang");
    	
    	String girdName = "objectInfo";
    	String gridHeader = ColumnDataSet.getInstance().getJqGridHeader(girdName);
    	String gridHeaderName = ColumnDataSet.getInstance().getJqGridHeaderName(girdName, messageSource, lang);
    	
    	modelMap.addAttribute("gridHeader", gridHeader);	
    	modelMap.addAttribute("gridHeaderName", gridHeaderName);

    	modelMap.addAttribute("dataName", girdName);							// dataSet Name
    	modelMap.addAttribute("dataKind", "Grid");									// dataSet Kind
    	modelMap.addAttribute("lang", lang);									// dataSet Kind
    	return "objectmgt/objectInfoMgt_G";
    }
    
    /**
     * 
     * @methodName : objectInfoGridList
     * @author 박용택
     * @since 2013. 12. 23.
     * @comment 
     *   객체 정보 Grid 목록 조회
     * @param page			그리드 목록 조회 page
     * @param rows			한 페이지에 표시할 항목 개수
     * @param dataName	조회할 Grid 데이터 name
     * @param dataKind		조회할 Grid 데이터 유형
     * @param sidx			정렬한 기준 컬럼
     * @param sord			정렬 방식 (asc : 오름차순 / desc : 내림차순)
     * @return String view url
     *
     */
    @SuppressWarnings("unchecked")
	@RequestMapping(value="/dwg/objectmgt/objectGridList.do")
    public String objectInfoGridList(
    		@RequestParam("page") int page,
    		@RequestParam("rows") int rows,
    		@RequestParam("dataName") String dataName,
    		@RequestParam("dataKind") String dataKind,
    		@RequestParam(value="sidx", required=false) String sidx,
    		@RequestParam(value="sord", required=false) String sord,
    		HttpServletRequest request,
    		ModelMap model) {
    	
    	
    	// requestParam 데이터를 Map 형태로 변환
    	HashMap<String, Object> searchList = ColumnDataSet.getInstance().getSearchListEscape(request);

    	int startNum = (page-1) * rows + 1;		// 데이터 조회 시작 rownum
    	int endNum = page * rows;						// 데이터 조회 종료 rownum
    	JqGridVO jqGridVO = new JqGridVO();		// Grid 데이터를 위한 VO 객체
    	
    	// 조회 조건 범위 지정
    	searchList.put("startNum", startNum);
    	searchList.put("endNum", endNum);
    	searchList.put("sidx", ColumnDataSet.getInstance().getDbColumn(sidx));	// Sort 컬럼 지정
    	searchList.put("sord", sord);																		// 정렬방식 지정
    	searchList.put("typeCommCode", OBJ_TYPE);											//공통 코드
    	
    	Object[] result = objectInfoService.selectObjectInfoList(searchList);
    	
    	List<EgovMap> mappInfo = (List<EgovMap>)result[0];
    	for(int i=0;i<mappInfo.size();i++){
    		String btn = "<span class='button h19 darkgray'><a href='#' title='' ";
        	btn += "onClick='parent.mappInfo("+mappInfo.get(i).get("objId")+")'>";
        	btn += "편집" + "</a></span>";
        	mappInfo.get(i).put("mappInfo",btn);
    	}
        jqGridVO.setPage(page);							// 현재 페이지 정보 셋팅
        jqGridVO.setRecords((Integer)result[1]);		// 전체 Grid row 개수
        jqGridVO.setRows((List<EgovMap>)result[0]);		// 조회 결과
        if(((Integer)result[1] % rows) > 0 ) {
        	jqGridVO.setTotal((Integer)result[1] / rows + 1);	// 전체 페이지 개수 (total row / rows)
        }else{
        	jqGridVO.setTotal((Integer)result[1] / rows);	// 전체 페이지 개수 (total row / rows)
        }
        
        XMLOutputter outputter = new XMLOutputter();

    	Format format = outputter.getFormat(); 
    	format = Format.getPrettyFormat();		// Grid 줄바꿈 설정
    	format = format.setEncoding("utf-8");	// 캐릭터셋 설정 
    	outputter.setFormat(format);
    	
    	// 그리드 xml 결과 전달
        model.addAttribute("gridList", outputter.outputString(ColumnDataSet.getInstance().getGridXmlData(jqGridVO, dataName, dataKind)));    	
    	return "cmmn/grid";
    }
    
    /**
     * @methodName : objectEditForm
     * @author 박용택
     * @since 2013. 12. 23.
     * @comment 
     *   객체 등록/수정 From
     * @param request
     * @param response
     * @param model
     * @return
     * @throws Exception
     */
    @RequestMapping(value="/dwg/objectmgt/objectEditForm.do", method=RequestMethod.GET)
	public String objectEditForm(
				HttpServletRequest request,
	    		HttpServletResponse response,
	    		ModelMap model) throws Exception{
	    	
    	String lang=request.getParameter("lang");
    	String objId = StringUtil.nullChk(request.getParameter("objId")); 
    	String viewMode = StringUtil.nullChk(request.getParameter("viewMode")); 
    	ObjectInfoVO vo = new ObjectInfoVO();
    	if("U".equals(request.getParameter("viewMode"))) {
    		vo = objectInfoService.getObjectInfoKey(objId);
        }
    	model.addAttribute("objVO",vo);
    	model.addAttribute("lang",lang);
    	model.addAttribute("viewMode",viewMode);
	    return "objectmgt/objectInfoMgt_E";
    }
    /**
     * @methodName : objectEditSubmitProc
     * @author 박용택
     * @since 2013. 12. 23.
     * @comment 
     *   객체 등록/수정 처리 메소드
     * @param request
     * @param response
     * @param model
     * @param status
     * @return
     * @throws Exception
     */
    @RequestMapping(value="/dwg/objectmgt/objectEditSubmitProc.do", method=RequestMethod.POST)
    public String objectEditSubmitProc(HttpServletRequest request,
    		HttpServletResponse response,
    		ModelMap model,
    		SessionStatus status) throws Exception {
    	String lang=request.getParameter("lang");
    	ObjectInfoVO vo = new ObjectInfoVO();
    	String viewMode = StringUtil.nullChk(request.getParameter("viewMode")); 
    	vo.setObjTyp(request.getParameter("objTyp")); 
    	vo.setObjNm(request.getParameter("objNm")); 
    	vo.setObjX(Double.parseDouble(request.getParameter("xCoordinates"))); 
    	vo.setObjY(Double.parseDouble(request.getParameter("yCoordinates"))); 
    	vo.setUseYn(request.getParameter("useYn")); Date now = new Date();
    	vo.setObjInst(now); 
    	if(viewMode.equals("C")){
    		int test = objectInfoService.insertObject(vo);	
    	} else if(viewMode.equals("U")){
    		vo.setObjId(request.getParameter("objId"));
    		if(objectInfoService.updateObject(vo) > 0){}	// 정보가 수정된 경우 결과 Y 처리
    	}
    	ProcResultMsg procResultMsg = new ProcResultMsg(response, "/DWGMP/dwg/objectmgt/main.do?lang="+lang,"replace");
    	procResultMsg.reload();
    	return null;
    }
    /**
     * @methodName : objectEditSubmitProc
     * @author 박용택
     * @since 2013. 12. 23.
     * @comment 
     *   오브젝트 삭제 가능 여부, 오브젝트 명 중복체크 
     * @param request
     * @param response
     * @return
     */
    @RequestMapping(value="/dwg/objectmgt/objValidChkeck.do", method=RequestMethod.POST)
    public ModelAndView objValidChkeck(HttpServletRequest request, HttpServletResponse response) {
        try {
        	String gubun = request.getParameter("gubun");
            String nmChkRst = "N";    // 코드명 체크결과
            String delChkRst="N";
            
            // 지역코드
            String objNm = StringUtil.nullChk(request.getParameter("objNm"));
            // 기존지역코드명
            String objOldNm = StringUtil.unescape(StringUtil.nullChk(request.getParameter("objOldNm")));
            // 지역코드
            if(gubun.equals("1")) {
            	if(!objNm.equals(objOldNm)){
            		int chkResult = objectInfoService.getObjectNmChk(objNm);
            		if(chkResult>0){
            			nmChkRst="Y";
            		}
            	}
            }
            
            // 지역코드 연관데이터체크
            if(gubun.equals("2")) {
            	int objId = Integer.parseInt(StringUtil.nullChk(request.getParameter("objId")));
            	int chkResult = objectInfoService.getObjectDelYn(objId);
            	if(chkResult>0){
            		delChkRst="Y";
            	}
                
            }
            
            String RtnMsg   =nmChkRst +"#" + delChkRst + "#";

            return new ModelAndView("cmmn/evtCdInfo_A", "RtnMsg", RtnMsg);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return null;
    }
    
    /**
     * @methodName : objectEditSubmitProc
     * @author 박용택
     * @since 2013. 12. 23.
     * @comment 
     *   객체 삭제 메소드
     * @param serNo
     * @param request
     * @param response
     * @param model
     * @param status
     * @return
     * @throws Exception
     */
    @RequestMapping(value="/dwg/objectmgt/objectDelete.do")
    public String deleteSample(@RequestParam("serNo") int serNo,
    		HttpServletRequest request,
    		HttpServletResponse response,
    		ModelMap model,
    		SessionStatus status) throws Exception {
    	
    	String lang= request.getParameter("lang");
    	if(objectInfoService.deleteObject(serNo) > 0)
    		model.addAttribute("result", "Y");
    	else
    		model.addAttribute("result", "N");
    	
    	status.setComplete();						// 중복 액션 방지를 위한 세션 완료 처리
    	ProcResultMsg procResultMsg = new ProcResultMsg(response, "/DWGMP/dwg/objectmgt/main.do?lang="+lang,"replace");
    	procResultMsg.reload();
    	return null;
    }
}
